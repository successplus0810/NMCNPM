{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\nimport './ChatInterface.css';\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\n  const recognition = useRef(null);\n  const synthesis = useRef(window.speechSynthesis);\n  useEffect(() => {\n    // Check and initialize Web Speech API\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognition.current = new SpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.lang = 'en-US';\n      recognition.current.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n        setInputText(transcript);\n      };\n      recognition.current.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsRecording(false);\n      };\n      setIsSpeechSupported(true);\n    }\n  }, []);\n  const startRecording = () => {\n    if (recognition.current) {\n      recognition.current.start();\n      setIsRecording(true);\n    }\n  };\n  const stopRecording = () => {\n    if (recognition.current) {\n      recognition.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleSend = async () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await getResponse(inputText);\n      const aiMessage = {\n        text: response,\n        sender: 'ai',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting response:', error);\n    }\n    setInputText('');\n  };\n  const playText = text => {\n    if (synthesis.current) {\n      setIsPlaying(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      utterance.onend = () => setIsPlaying(false);\n      synthesis.current.speak(utterance);\n    }\n  };\n  const getResponse = async text => {\n    const lowercaseText = text.toLowerCase();\n\n    // More relevant responses for English learning context\n    const responses = {\n      'learn english': [\"That's great! What specific areas would you like to focus on? For example:\\n- Speaking\\n- Listening\\n- Grammar\\n- Vocabulary\", \"Excellent choice! What's your current English level? Beginner, intermediate, or advanced?\", \"I'd be happy to help! Which skills do you want to improve first?\"],\n      'improve': [\"What specific aspects of English would you like to improve?\", \"Could you tell me about your current challenges with English?\", \"What situations do you want to use English in? Work, travel, or daily conversation?\"],\n      'speak': [\"Would you like to practice speaking about specific topics?\", \"Let's have a conversation! What topics interest you?\", \"We can practice common daily conversations. Would you like that?\"],\n      'grammar': [\"Which grammar points are you struggling with?\", \"Would you like to practice using specific tenses?\", \"Let's work on grammar through conversation practice!\"],\n      'vocabulary': [\"What kind of vocabulary would you like to learn?\", \"We can practice vocabulary in different contexts. What interests you?\", \"Would you like to learn everyday phrases and expressions?\"]\n    };\n\n    // Find matching response based on keywords\n    for (const [key, responseList] of Object.entries(responses)) {\n      if (lowercaseText.includes(key)) {\n        return responseList[Math.floor(Math.random() * responseList.length)];\n      }\n    }\n\n    // Default responses for general conversation\n    const defaultResponses = [\"Could you elaborate more on what you'd like to learn?\", \"What specific English skills would you like to practice?\", \"Would you like to practice conversation on a particular topic?\", \"Let's focus on your English learning goals. What would you like to achieve?\"];\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n  const topics = {\n    greetings: {\n      patterns: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening'],\n      responses: ['Hello! How are you today?', 'Hi there! Ready to practice English?', 'Great to see you! Shall we start our conversation?']\n    },\n    feelings: {\n      patterns: ['how are you', 'how do you feel', 'how\\'s it going'],\n      responses: ['I\\'m doing well, thank you! How about you?', 'I\\'m great! Would you like to practice describing emotions in English?', 'I\\'m here to help you practice! How are you feeling today?']\n    },\n    hobbies: {\n      patterns: ['hobby', 'interest', 'free time', 'like to do'],\n      responses: ['What are your favorite hobbies? Let\\'s discuss them in English!', 'Tell me about what you like to do in your free time.', 'Hobbies are a great topic for conversation practice! What do you enjoy doing?']\n    }\n  };\n\n  // Check for matching patterns\n  for (const topic of Object.values(topics)) {\n    if (topic.patterns.some(pattern => lowercaseText.includes(pattern))) {\n      return topic.responses[Math.floor(Math.random() * topic.responses.length)];\n    }\n  }\n\n  // Default responses for unmatched patterns\n  const defaultResponses = ['That\\'s interesting! Could you tell me more about that?', 'I see. How would you explain that in different words?', 'Let\\'s explore this topic further. What aspects interest you most?', 'Could you give me an example of what you mean?', 'That\\'s a good point. What else would you like to discuss?'];\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n};\n_s(ChatInterface, \"7/Bk8OUbnJP27YNNy81XTB6nynk=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","FaMicrophone","FaPlay","FaStop","ChatInterface","_s","messages","setMessages","inputText","setInputText","isRecording","setIsRecording","isPlaying","setIsPlaying","isSpeechSupported","setIsSpeechSupported","recognition","synthesis","window","speechSynthesis","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","onerror","console","error","startRecording","start","stopRecording","stop","handleSend","trim","newMessage","text","sender","timestamp","Date","toISOString","prev","response","getResponse","aiMessage","playText","utterance","SpeechSynthesisUtterance","onend","speak","lowercaseText","toLowerCase","responses","key","responseList","Object","entries","includes","Math","floor","random","length","defaultResponses","topics","greetings","patterns","feelings","hobbies","topic","values","some","pattern","_c","$RefreshReg$"],"sources":["D:/khtn/hk4/doan2/doan4/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\r\n\r\n  const recognition = useRef(null);\r\n  const synthesis = useRef(window.speechSynthesis);\r\n\r\n  useEffect(() => {\r\n    // Check and initialize Web Speech API\r\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      recognition.current = new SpeechRecognition();\r\n      recognition.current.continuous = true;\r\n      recognition.current.interimResults = true;\r\n      recognition.current.lang = 'en-US';\r\n\r\n      recognition.current.onresult = (event) => {\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0])\r\n          .map(result => result.transcript)\r\n          .join('');\r\n        setInputText(transcript);\r\n      };\r\n\r\n      recognition.current.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setIsRecording(false);\r\n      };\r\n\r\n      setIsSpeechSupported(true);\r\n    }\r\n  }, []);\r\n\r\n  const startRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.start();\r\n      setIsRecording(true);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const newMessage = {\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setMessages(prev => [...prev, newMessage]);\r\n\r\n    try {\r\n      const response = await getResponse(inputText);\r\n      \r\n      const aiMessage = {\r\n        text: response,\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      console.error('Error getting response:', error);\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  const playText = (text) => {\r\n    if (synthesis.current) {\r\n      setIsPlaying(true);\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = 'en-US';\r\n      utterance.onend = () => setIsPlaying(false);\r\n      synthesis.current.speak(utterance);\r\n    }\r\n  };\r\n\r\n  const getResponse = async (text) => {\r\n    const lowercaseText = text.toLowerCase();\r\n    \r\n    // More relevant responses for English learning context\r\n    const responses = {\r\n      'learn english': [\r\n        \"That's great! What specific areas would you like to focus on? For example:\\n- Speaking\\n- Listening\\n- Grammar\\n- Vocabulary\",\r\n        \"Excellent choice! What's your current English level? Beginner, intermediate, or advanced?\",\r\n        \"I'd be happy to help! Which skills do you want to improve first?\"\r\n      ],\r\n      'improve': [\r\n        \"What specific aspects of English would you like to improve?\",\r\n        \"Could you tell me about your current challenges with English?\",\r\n        \"What situations do you want to use English in? Work, travel, or daily conversation?\"\r\n      ],\r\n      'speak': [\r\n        \"Would you like to practice speaking about specific topics?\",\r\n        \"Let's have a conversation! What topics interest you?\",\r\n        \"We can practice common daily conversations. Would you like that?\"\r\n      ],\r\n      'grammar': [\r\n        \"Which grammar points are you struggling with?\",\r\n        \"Would you like to practice using specific tenses?\",\r\n        \"Let's work on grammar through conversation practice!\"\r\n      ],\r\n      'vocabulary': [\r\n        \"What kind of vocabulary would you like to learn?\",\r\n        \"We can practice vocabulary in different contexts. What interests you?\",\r\n        \"Would you like to learn everyday phrases and expressions?\"\r\n      ]\r\n    };\r\n\r\n    // Find matching response based on keywords\r\n    for (const [key, responseList] of Object.entries(responses)) {\r\n      if (lowercaseText.includes(key)) {\r\n        return responseList[Math.floor(Math.random() * responseList.length)];\r\n      }\r\n    }\r\n\r\n    // Default responses for general conversation\r\n    const defaultResponses = [\r\n      \"Could you elaborate more on what you'd like to learn?\",\r\n      \"What specific English skills would you like to practice?\",\r\n      \"Would you like to practice conversation on a particular topic?\",\r\n      \"Let's focus on your English learning goals. What would you like to achieve?\"\r\n    ];\r\n\r\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n  };\r\n\r\n  const topics = {\r\n    greetings: {\r\n      patterns: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening'],\r\n      responses: [\r\n        'Hello! How are you today?',\r\n        'Hi there! Ready to practice English?',\r\n        'Great to see you! Shall we start our conversation?'\r\n      ]\r\n    },\r\n    feelings: {\r\n      patterns: ['how are you', 'how do you feel', 'how\\'s it going'],\r\n      responses: [\r\n        'I\\'m doing well, thank you! How about you?',\r\n        'I\\'m great! Would you like to practice describing emotions in English?',\r\n        'I\\'m here to help you practice! How are you feeling today?'\r\n      ]\r\n    },\r\n    hobbies: {\r\n      patterns: ['hobby', 'interest', 'free time', 'like to do'],\r\n      responses: [\r\n        'What are your favorite hobbies? Let\\'s discuss them in English!',\r\n        'Tell me about what you like to do in your free time.',\r\n        'Hobbies are a great topic for conversation practice! What do you enjoy doing?'\r\n      ]\r\n    }\r\n  };\r\n\r\n  // Check for matching patterns\r\n  for (const topic of Object.values(topics)) {\r\n    if (topic.patterns.some(pattern => lowercaseText.includes(pattern))) {\r\n      return topic.responses[Math.floor(Math.random() * topic.responses.length)];\r\n    }\r\n  }\r\n\r\n  // Default responses for unmatched patterns\r\n  const defaultResponses = [\r\n    'That\\'s interesting! Could you tell me more about that?',\r\n    'I see. How would you explain that in different words?',\r\n    'Let\\'s explore this topic further. What aspects interest you most?',\r\n    'Could you give me an example of what you mean?',\r\n    'That\\'s a good point. What else would you like to discuss?'\r\n  ];\r\n\r\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n};\r\n\r\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}