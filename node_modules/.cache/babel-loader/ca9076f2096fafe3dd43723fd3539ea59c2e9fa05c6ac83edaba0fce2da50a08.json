{"ast":null,"code":"var _jsxFileName = \"D:\\\\khtn\\\\hk4\\\\doan2\\\\doan4\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\nimport { GoogleGenAI } from \"@google/genai\";\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\n  const recognition = useRef(null);\n  const synthesis = useRef(window.speechSynthesis);\n  const ai = new GoogleGenAI({\n    apiKey: \"AIzaSyDt-W_YmTQEYB7lyW2wS7c8UyFq-CyKiYE\"\n  });\n  // const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n  // const genAI = new GoogleGenerativeAI(process.env.API_KEY);\n\n  useEffect(() => {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognition.current = new SpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.lang = 'en-US';\n      recognition.current.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n        setInputText(transcript);\n      };\n      recognition.current.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsRecording(false);\n      };\n      setIsSpeechSupported(true);\n    }\n  }, []);\n  const startRecording = () => {\n    if (recognition.current) {\n      recognition.current.start();\n      setIsRecording(true);\n    }\n  };\n  const stopRecording = () => {\n    if (recognition.current) {\n      recognition.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleSend = async () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await getResponse(inputText);\n      const aiMessage = {\n        text: response,\n        sender: 'ai',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting response:', error);\n    }\n    setInputText('');\n  };\n  const playText = text => {\n    if (synthesis.current) {\n      setIsPlaying(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      utterance.onend = () => setIsPlaying(false);\n      synthesis.current.speak(utterance);\n    }\n  };\n\n  // const getResponse = async (text) => {\n  //   try {\n  //     setIsLoading(true);\n  //     const response = await ai.models.generateContent({\n  //       model: \"gemini-2.0-flash\",\n  //       contents: text,\n  //     });\n  //     return response.text;\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //     return \"I apologize, but I'm having trouble. Could you try again?\";\n  //   } finally {\n  //     setIsLoading(false);\n  //   }\n  // };\n\n  async function getResponse(text) {\n    try {\n      setIsLoading(true);\n      // const model = genAI.getModel({ model: \"gemini-2.0-flash\" });\n      const model = ai.getModel({\n        model: \"gemini-2.0-flash\"\n      });\n      // Refactor the prompt to include instructions for short answers\n      const modifiedPrompt = [{\n        role: \"user\",\n        parts: [{\n          text: text\n        }]\n      }];\n      const result = await model.generateContent({\n        contents: modifiedPrompt,\n        generationConfig: {\n          temperature: 0.4,\n          maxOutputTokens: 100 // Added to keep responses short\n        }\n      });\n      const responseText = result.response.candidates[0].content.parts[0].text;\n      return responseText;\n    } catch (error) {\n      console.error(\"Error:\", error);\n      return \"I apologize, but I'm having trouble. Could you try again?\";\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [!isSpeechSupported && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning\",\n      children: \"Speech recognition is not supported in your browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), message.sender === 'ai' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => playText(message.text),\n          disabled: isPlaying,\n          className: \"play-button\",\n          children: isPlaying ? /*#__PURE__*/_jsxDEV(FaStop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 30\n          }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"Type or speak your message...\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `record-button ${isRecording ? 'recording' : ''}`,\n          onClick: isRecording ? stopRecording : startRecording,\n          disabled: !isSpeechSupported || isLoading,\n          children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSend,\n          disabled: !inputText.trim() || isLoading,\n          children: isLoading ? 'Thinking...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}; // Added missing closing brace\n_s(ChatInterface, \"NLcb80FkJkEXrnmVldGpANd6QkQ=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","FaMicrophone","FaPlay","FaStop","GoogleGenAI","jsxDEV","_jsxDEV","ChatInterface","_s","isLoading","setIsLoading","messages","setMessages","inputText","setInputText","isRecording","setIsRecording","isPlaying","setIsPlaying","isSpeechSupported","setIsSpeechSupported","recognition","synthesis","window","speechSynthesis","ai","apiKey","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","onerror","console","error","startRecording","start","stopRecording","stop","handleSend","trim","newMessage","text","sender","timestamp","Date","toISOString","prev","response","getResponse","aiMessage","playText","utterance","SpeechSynthesisUtterance","onend","speak","model","getModel","modifiedPrompt","role","parts","generateContent","contents","generationConfig","temperature","maxOutputTokens","responseText","candidates","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","onClick","disabled","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/khtn/hk4/doan2/doan4/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\r\nimport { GoogleGenAI } from \"@google/genai\";\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\r\n\r\n  const recognition = useRef(null);\r\n  const synthesis = useRef(window.speechSynthesis);\r\n  const ai = new GoogleGenAI({ apiKey: \"AIzaSyDt-W_YmTQEYB7lyW2wS7c8UyFq-CyKiYE\" });\r\n  // const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n  // const genAI = new GoogleGenerativeAI(process.env.API_KEY);\r\n\r\n  useEffect(() => {\r\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      recognition.current = new SpeechRecognition();\r\n      recognition.current.continuous = true;\r\n      recognition.current.interimResults = true;\r\n      recognition.current.lang = 'en-US';\r\n\r\n      recognition.current.onresult = (event) => {\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0])\r\n          .map(result => result.transcript)\r\n          .join('');\r\n        setInputText(transcript);\r\n      };\r\n\r\n      recognition.current.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setIsRecording(false);\r\n      };\r\n\r\n      setIsSpeechSupported(true);\r\n    }\r\n  }, []);\r\n\r\n  const startRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.start();\r\n      setIsRecording(true);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const newMessage = {\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setMessages(prev => [...prev, newMessage]);\r\n\r\n    try {\r\n      const response = await getResponse(inputText);\r\n      \r\n      const aiMessage = {\r\n        text: response,\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      console.error('Error getting response:', error);\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  const playText = (text) => {\r\n    if (synthesis.current) {\r\n      setIsPlaying(true);\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = 'en-US';\r\n      utterance.onend = () => setIsPlaying(false);\r\n      synthesis.current.speak(utterance);\r\n    }\r\n  };\r\n\r\n  // const getResponse = async (text) => {\r\n  //   try {\r\n  //     setIsLoading(true);\r\n  //     const response = await ai.models.generateContent({\r\n  //       model: \"gemini-2.0-flash\",\r\n  //       contents: text,\r\n  //     });\r\n  //     return response.text;\r\n  //   } catch (error) {\r\n  //     console.error('Error:', error);\r\n  //     return \"I apologize, but I'm having trouble. Could you try again?\";\r\n  //   } finally {\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  async function getResponse(text) {\r\n    try {\r\n      setIsLoading(true);\r\n      // const model = genAI.getModel({ model: \"gemini-2.0-flash\" });\r\n      const model = ai.getModel({ model: \"gemini-2.0-flash\" });\r\n      // Refactor the prompt to include instructions for short answers\r\n      const modifiedPrompt = [\r\n        {\r\n          role: \"user\",\r\n          parts: [{ text: text }],\r\n        },\r\n      ];\r\n  \r\n      const result = await model.generateContent({\r\n        contents: modifiedPrompt,\r\n        generationConfig: {\r\n          temperature: 0.4,\r\n          maxOutputTokens: 100,  // Added to keep responses short\r\n        },\r\n      });\r\n      const responseText = result.response.candidates[0].content.parts[0].text;\r\n      return responseText;\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      return \"I apologize, but I'm having trouble. Could you try again?\";\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {!isSpeechSupported && (\r\n        <div className=\"warning\">Speech recognition is not supported in your browser.</div>\r\n      )}\r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            <p>{message.text}</p>\r\n            {message.sender === 'ai' && (\r\n              <button \r\n                onClick={() => playText(message.text)}\r\n                disabled={isPlaying}\r\n                className=\"play-button\"\r\n              >\r\n                {isPlaying ? <FaStop /> : <FaPlay />}\r\n              </button>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"input-container\">\r\n        <textarea\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          placeholder=\"Type or speak your message...\"\r\n          disabled={isLoading}\r\n        />\r\n        <div className=\"button-group\">\r\n          <button\r\n            className={`record-button ${isRecording ? 'recording' : ''}`}\r\n            onClick={isRecording ? stopRecording : startRecording}\r\n            disabled={!isSpeechSupported || isLoading}\r\n          >\r\n            <FaMicrophone />\r\n          </button>\r\n          <button \r\n            className=\"send-button\"\r\n            onClick={handleSend}\r\n            disabled={!inputText.trim() || isLoading}\r\n          >\r\n            {isLoading ? 'Thinking...' : 'Send'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; // Added missing closing brace\r\n\r\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}