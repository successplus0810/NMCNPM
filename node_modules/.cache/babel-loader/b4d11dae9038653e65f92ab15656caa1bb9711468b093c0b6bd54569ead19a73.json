{"ast":null,"code":"var _jsxFileName = \"D:\\\\khtn\\\\hk4\\\\doan2\\\\doan4\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\n  const recognition = useRef(null);\n  const synthesis = useRef(window.speechSynthesis);\n  useEffect(() => {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognition.current = new SpeechRecognition();\n      recognition.current.continuous = true;\n      recognition.current.interimResults = true;\n      recognition.current.lang = 'en-US';\n      recognition.current.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n        setInputText(transcript);\n      };\n      recognition.current.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsRecording(false);\n      };\n      setIsSpeechSupported(true);\n    }\n  }, []);\n  const startRecording = () => {\n    if (recognition.current) {\n      recognition.current.start();\n      setIsRecording(true);\n    }\n  };\n  const stopRecording = () => {\n    if (recognition.current) {\n      recognition.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const handleSend = async () => {\n    if (!inputText.trim()) return;\n    const newMessage = {\n      text: inputText,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await getResponse(inputText);\n      const aiMessage = {\n        text: response,\n        sender: 'ai',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting response:', error);\n    }\n    setInputText('');\n  };\n  const playText = text => {\n    if (synthesis.current) {\n      setIsPlaying(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'en-US';\n      utterance.onend = () => setIsPlaying(false);\n      synthesis.current.speak(utterance);\n    }\n  };\n  const getResponse = async text => {\n    const lowercaseText = text.toLowerCase();\n    const topics = {\n      greetings: {\n        patterns: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening'],\n        responses: ['Hello! How are you today?', 'Hi there! Ready to practice English?', 'Great to see you! Shall we start our conversation?']\n      },\n      feelings: {\n        patterns: ['how are you', 'how do you feel', 'how\\'s it going'],\n        responses: ['I\\'m doing well, thank you! How about you?', 'I\\'m great! Would you like to practice describing emotions in English?', 'I\\'m here to help you practice! How are you feeling today?']\n      },\n      learning: {\n        patterns: ['learn english', 'study english', 'practice english'],\n        responses: ['What specific areas would you like to focus on? Speaking, listening, grammar, or vocabulary?', 'What\\'s your current English level? Beginner, intermediate, or advanced?', 'Which skills do you want to improve first?']\n      }\n    };\n\n    // Check for matching patterns\n    for (const [_, topic] of Object.entries(topics)) {\n      if (topic.patterns.some(pattern => lowercaseText.includes(pattern))) {\n        return topic.responses[Math.floor(Math.random() * topic.responses.length)];\n      }\n    }\n\n    // Default responses\n    const defaultResponses = ['Could you tell me more about that?', 'How would you explain that differently?', 'That\\'s interesting! Can you give me an example?', 'Let\\'s explore that topic more. What specifically interests you?'];\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [!isSpeechSupported && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warning\",\n      children: \"Speech recognition is not supported in your browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), message.sender === 'ai' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => playText(message.text),\n          disabled: isPlaying,\n          className: \"play-button\",\n          children: isPlaying ? /*#__PURE__*/_jsxDEV(FaStop, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 30\n          }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"Type or speak your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `record-button ${isRecording ? 'recording' : ''}`,\n          onClick: isRecording ? stopRecording : startRecording,\n          disabled: !isSpeechSupported,\n          children: /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSend,\n          disabled: !inputText.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"7/Bk8OUbnJP27YNNy81XTB6nynk=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","FaMicrophone","FaPlay","FaStop","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","inputText","setInputText","isRecording","setIsRecording","isPlaying","setIsPlaying","isSpeechSupported","setIsSpeechSupported","recognition","synthesis","window","speechSynthesis","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","transcript","Array","from","results","map","result","join","onerror","console","error","startRecording","start","stopRecording","stop","handleSend","trim","newMessage","text","sender","timestamp","Date","toISOString","prev","response","getResponse","aiMessage","playText","utterance","SpeechSynthesisUtterance","onend","speak","lowercaseText","toLowerCase","topics","greetings","patterns","responses","feelings","learning","_","topic","Object","entries","some","pattern","includes","Math","floor","random","length","defaultResponses","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","onClick","disabled","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/khtn/hk4/doan2/doan4/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { FaMicrophone, FaPlay, FaStop } from 'react-icons/fa';\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isSpeechSupported, setIsSpeechSupported] = useState(false);\r\n\r\n  const recognition = useRef(null);\r\n  const synthesis = useRef(window.speechSynthesis);\r\n\r\n  useEffect(() => {\r\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      recognition.current = new SpeechRecognition();\r\n      recognition.current.continuous = true;\r\n      recognition.current.interimResults = true;\r\n      recognition.current.lang = 'en-US';\r\n\r\n      recognition.current.onresult = (event) => {\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0])\r\n          .map(result => result.transcript)\r\n          .join('');\r\n        setInputText(transcript);\r\n      };\r\n\r\n      recognition.current.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setIsRecording(false);\r\n      };\r\n\r\n      setIsSpeechSupported(true);\r\n    }\r\n  }, []);\r\n\r\n  const startRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.start();\r\n      setIsRecording(true);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (recognition.current) {\r\n      recognition.current.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const newMessage = {\r\n      text: inputText,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setMessages(prev => [...prev, newMessage]);\r\n\r\n    try {\r\n      const response = await getResponse(inputText);\r\n      \r\n      const aiMessage = {\r\n        text: response,\r\n        sender: 'ai',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      console.error('Error getting response:', error);\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  const playText = (text) => {\r\n    if (synthesis.current) {\r\n      setIsPlaying(true);\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = 'en-US';\r\n      utterance.onend = () => setIsPlaying(false);\r\n      synthesis.current.speak(utterance);\r\n    }\r\n  };\r\n\r\n  const getResponse = async (text) => {\r\n    const lowercaseText = text.toLowerCase();\r\n    \r\n    const topics = {\r\n      greetings: {\r\n        patterns: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening'],\r\n        responses: [\r\n          'Hello! How are you today?',\r\n          'Hi there! Ready to practice English?',\r\n          'Great to see you! Shall we start our conversation?'\r\n        ]\r\n      },\r\n      feelings: {\r\n        patterns: ['how are you', 'how do you feel', 'how\\'s it going'],\r\n        responses: [\r\n          'I\\'m doing well, thank you! How about you?',\r\n          'I\\'m great! Would you like to practice describing emotions in English?',\r\n          'I\\'m here to help you practice! How are you feeling today?'\r\n        ]\r\n      },\r\n      learning: {\r\n        patterns: ['learn english', 'study english', 'practice english'],\r\n        responses: [\r\n          'What specific areas would you like to focus on? Speaking, listening, grammar, or vocabulary?',\r\n          'What\\'s your current English level? Beginner, intermediate, or advanced?',\r\n          'Which skills do you want to improve first?'\r\n        ]\r\n      }\r\n    };\r\n\r\n    // Check for matching patterns\r\n    for (const [_, topic] of Object.entries(topics)) {\r\n      if (topic.patterns.some(pattern => lowercaseText.includes(pattern))) {\r\n        return topic.responses[Math.floor(Math.random() * topic.responses.length)];\r\n      }\r\n    }\r\n\r\n    // Default responses\r\n    const defaultResponses = [\r\n      'Could you tell me more about that?',\r\n      'How would you explain that differently?',\r\n      'That\\'s interesting! Can you give me an example?',\r\n      'Let\\'s explore that topic more. What specifically interests you?'\r\n    ];\r\n\r\n    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {!isSpeechSupported && (\r\n        <div className=\"warning\">Speech recognition is not supported in your browser.</div>\r\n      )}\r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            <p>{message.text}</p>\r\n            {message.sender === 'ai' && (\r\n              <button \r\n                onClick={() => playText(message.text)}\r\n                disabled={isPlaying}\r\n                className=\"play-button\"\r\n              >\r\n                {isPlaying ? <FaStop /> : <FaPlay />}\r\n              </button>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"input-container\">\r\n        <textarea\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          placeholder=\"Type or speak your message...\"\r\n        />\r\n        <div className=\"button-group\">\r\n          <button\r\n            className={`record-button ${isRecording ? 'recording' : ''}`}\r\n            onClick={isRecording ? stopRecording : startRecording}\r\n            disabled={!isSpeechSupported}\r\n          >\r\n            <FaMicrophone />\r\n          </button>\r\n          <button \r\n            className=\"send-button\"\r\n            onClick={handleSend}\r\n            disabled={!inputText.trim()}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}